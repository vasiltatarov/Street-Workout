@model IEnumerable<Message>
@{
    ViewData["Title"] = "Chat Room";
    var groupedMessages = Model
        .GroupBy(x => x.Username)
        .Select(x => x.Last())
        .ToList();
}

<div class="container">
    <h3 class=" text-center">Messenger</h3>
    <div class="messaging">
        <div class="inbox_msg">
            <div class="inbox_people">
                <div class="headind_srch">
                    <div class="recent_heading">
                        <h4>Last Active</h4>
                    </div>
                </div>
                <div class="inbox_chat">
                    @foreach (var message in groupedMessages)
                    {
                        <div class="chat_list">
                            <div class="chat_people">
                                <div class="chat_img">
                                    <img class="rounded-circle" src="@message.UserImageUrl" alt="@message.Username">
                                </div>
                                <div class="chat_ib">
                                    <h5>
                                        @message.Username
                                        <span class="chat_date">
                                            <time>@message.CreatedOn.ToLocalTime()</time>
                                        </span>
                                    </h5>
                                    <p>@message.Text</p>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="mesgs">
                <div id="messagesList" class="msg_history messages">
                    @foreach (var message in Model)
                    {
                        <br />
                        <div class="incoming_msg">
                            <div class="incoming_msg_img">
                                <img class="rounded-circle" src="@message.UserImageUrl" alt="@message.Username" />
                            </div>
                            <div class="received_msg">
                                <div class="received_withd_msg">
                                    <p>@message.Text</p>
                                    <span class="text-danger">@message.Username</span>:
                                    <time>@message.CreatedOn.ToLocalTime()</time>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <div class="type_msg">
                    <div id="message-holder" class="input_msg_write">
                        <input id="messageInput" type="text" class="write_msg" placeholder="Type a message" />
                        <button id="sendButton" class="msg_send_btn" type="button">
                            <i class="fa fa-paper-plane" aria-hidden="true"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>

@section Scripts {
    <script>
        var connection = new signalR
            .HubConnectionBuilder()
            .withUrl("/chat")
            .build();

        connection.on("NewMessage",
            function (message) {
                var chatInfo = `
<br />
<div class="incoming_msg">
        <div class="incoming_msg_img">
            <img class="rounded-circle" src="${message.userImageUrl}" alt="" />
        </div>
        <div class="received_msg">
            <div class="received_withd_msg">
                <p>${message.text}</p>
                <span style="color: red">${message.username}</span>: ${moment().format('DD.MM.yyyy HH:mm:ss')}
            </div>
        </div>
</div>`;
                $("#messagesList").append(chatInfo);
                $(".messages").animate({ scrollTop: "99999" }, "fast");
            });

        $('#sendButton').click(function () {
            var message = $('#messageInput').val();

            var minLength = 2;
            var maxLength = 300;

            if (message === null || message === '') {
                alert('Cannot Publish Empty Message.');
                return;
            }
            if (message.length < minLength || message.length > maxLength) {
                alert(`Message should have minimum length ${minLength} and maximum length ${maxLength}.`);
                return;
            }

            connection.invoke('Send', message);
            $('#messageInput').val('');
        });

        connection
            .start()
            .catch(function (err) {
                return console.error(err.toString());
            });

        function escapeHtml(unsafe) {
            return unsafe
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }
    </script>
}
